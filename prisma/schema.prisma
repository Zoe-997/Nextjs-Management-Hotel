// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =====================================================
// ===============   HOTEL MANAGEMENT   =================
// =====================================================
model Hotel {
  id          Int      @id @default(autoincrement())
  name        String
  address     String?
  phone       String?
  description String?

  logo        String?  // URL ·∫£nh logo
  logoWidth   Int?     // chi·ªÅu r·ªông logo (px)
  logoHeight  Int?     // chi·ªÅu cao logo (px)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("hotel")
}

// =====================================================
// ===============   SEO MANAGEMENT   =================
// =====================================================
model SeoMeta {
  id          Int      @id @default(autoincrement())
  pageType    String   // VD: "home", "blog", "product", "booking"
  pageSlug    String?  // VD: "/blogs" ho·∫∑c "/products/leather-belt"
  title       String?
  description String?
  keywords    String?
  canonical   String?
  ogTitle     String?
  ogDescription String?
  ogImage     String?
  twitterCard String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("seo_metas")
}

// =====================================================
// ===============   USER / CUSTOMER   =================
// =====================================================
model User {
  id            String      @id @default(uuid())
  email         String      @unique
  password      String
  name          String?
  phone         String?
  birthday      DateTime?
  avatarUrl     String?      // Cloudinary/Supabase avatar
  role          Role         @default(CUSTOMER)
  customerType  CustomerType?  @default(REGULAR)
  handle        String      @unique
  bookings      Booking[]
  payments      Payment[]
  vouchers      VoucherUser[]
  reviews       Review[]
  blogs         Blog[]
  blogComments  BlogComment[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  sourceId   String?
  source     Source?   @relation(fields: [sourceId], references: [id])

  paymentHistories  PaymentHistory[]

  @@map("users")
}

// =====================================================
// ===============   ROOM MANAGEMENT   =================
// =====================================================
model Room {
  id            String       @id @default(uuid())
  name          String
  description   String?
  pricePerNight Float
  maxGuests     Int
  images        String[]     // Multiple images (Cloudinary URLs)
  status        RoomStatus   @default(AVAILABLE)
  bookings      Booking[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@map("rooms")
}

// =====================================================
// ===============   BOOKING + PAYMENT   ===============
// =====================================================
model Booking {
  id            String        @id @default(uuid())
  userId        String
  roomId        String
  checkIn       DateTime
  checkOut      DateTime

  basePrice     Float          // Gi√° ph√≤ng g·ªëc
  extraCharges  Float          @default(0) // Ph√≠ ph√°t sinh th√™m
  depositAmount Float          @default(0) // S·ªë ti·ªÅn ƒë·∫∑t c·ªçc (0 n·∫øu ch∆∞a c·ªçc)
  discount      Float          @default(0)
  totalPrice    Float          // T·ªïng gi√° cu·ªëi c√πng
  balanceDue    Float          @default(0) // üí° S·ªë ti·ªÅn kh√°ch c·∫ßn tr·∫£ th√™m ho·∫∑c ƒë∆∞·ª£c ho√†n
  
  paymentType    PaymentType   @default(POSTPAID)
  paymentStatus  PaymentStatus @default(PENDING) // Tr·∫°ng th√°i c·ªßa thanh to√°n
  status        BookingStatus  @default(PENDING) // Tr·∫°ng th√°i c·ªßa Booking
  payments      Payment[]

  user          User           @relation(fields: [userId], references: [id])
  room          Room           @relation(fields: [roomId], references: [id])
  review        Review?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  sourceId   String?
  source     Source?   @relation(fields: [sourceId], references: [id])

  @@map("bookings")
}

model Source {
  id       String    @id @default(uuid())
  name     String    @unique
  users    User[]
  bookings Booking[]

  @@map("sources")
}

model Payment {
  id             String          @id @default(uuid())
  bookingId      String
  userId         String?
  type           PaymentType     @default(DEPOSIT)
  amount         Float
  method         String?         // Ti·ªÅn m·∫∑t, chuy·ªÉn kho·∫£n, th·∫ª, v.v.
  transactionId  String?         // ID giao d·ªãch t·ª´ c·ªïng thanh to√°n
  status         PaymentStatus   @default(PENDING)
  note           String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  booking        Booking         @relation(fields: [bookingId], references: [id])
  user           User?           @relation(fields: [userId], references: [id])
  histories      PaymentHistory[]

  @@map("payments")
  @@index([bookingId])
}

model PaymentHistory {
  id             String          @id @default(uuid())
  paymentId      String
  changedById    String?         // Ai thay ƒë·ªïi
  oldStatus      PaymentStatus?
  newStatus      PaymentStatus?
  oldAmount      Float?
  newAmount      Float?
  oldMethod      String?
  newMethod      String?
  note           String?
  createdAt      DateTime        @default(now())

  payment        Payment         @relation(fields: [paymentId], references: [id])
  changedBy      User?           @relation(fields: [changedById], references: [id])

  @@map("payment_histories")
  @@index([paymentId])
}

// =====================================================
// ===============   VOUCHER / PROMOTION   ==============
// =====================================================
model Voucher {
  id             String       @id @default(uuid())
  code           String       @unique
  description    String?
  discountType   DiscountType
  discountValue  Float
  validFrom      DateTime
  validTo        DateTime
  maxUsage       Int?
  usageCount     Int           @default(0)
  applicableRooms String[]
  applicableDates DateTime[]
  isActive       Boolean       @default(true)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  users          VoucherUser[]

  @@map("vouchers")
}

model VoucherUser {
  id          String    @id @default(uuid())
  voucherId   String
  userId      String
  used        Boolean   @default(false)
  assignedAt  DateTime  @default(now())
  usedAt      DateTime?
  voucher     Voucher   @relation(fields: [voucherId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@map("voucher_users")
}

// =====================================================
// ===============   REVIEW MANAGEMENT   ================
// =====================================================
model Review {
  id          String     @id @default(uuid())
  bookingId   String     @unique
  userId      String
  rating      Int
  comment     String?
  autoBlogId  String?     @unique // Blog auto-created from review
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  booking     Booking     @relation(fields: [bookingId], references: [id])
  user        User        @relation(fields: [userId], references: [id])
  autoBlog    Blog?       @relation("AutoBlogFromReview", fields: [autoBlogId], references: [id])

  @@map("reviews")
}

// =====================================================
// ===============   BLOG / SEO CONTENT   ===============
// =====================================================
model Blog {
  id           String          @id @default(uuid())
  title        String
  slug         String          @unique
  excerpt      String?
  content      String
  coverImage   String?         // Cloudinary / Supabase URL
  authorId     String
  publishedAt  DateTime?
  status       BlogStatus      @default(DRAFT)
  seoTitle     String?
  seoDesc      String?
  metaKeywords String[]        // For SEO optimization
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  author       User            @relation(fields: [authorId], references: [id])
  tags         BlogTagOnBlog[]
  comments     BlogComment[]
  reviewSource Review?         @relation("AutoBlogFromReview")

  @@map("blogs")
}

model BlogComment {
  id         String    @id @default(uuid())
  content    String
  userId     String
  blogId     String
  createdAt  DateTime  @default(now())
  user       User      @relation(fields: [userId], references: [id])
  blog       Blog      @relation(fields: [blogId], references: [id])

  @@map("blog_comments")
}

// =====================================================
// ===============   BLOG TAG MANAGEMENT   ==============
// =====================================================
model BlogTag {
  id      String          @id @default(uuid())
  name    String           @unique
  slug    String           @unique
  blogs   BlogTagOnBlog[]

  @@map("blog_tags")
}

model BlogTagOnBlog {
  blogId  String
  tagId   String
  blog    Blog    @relation(fields: [blogId], references: [id])
  tag     BlogTag @relation(fields: [tagId], references: [id])
  @@id([blogId, tagId])

  @@map("blog_tags_on_blogs")
}

// =====================================================
// ===================== ENUMS ==========================
// =====================================================
enum Role {
  ADMIN        // Qu·∫£n tr·ªã to√†n h·ªá th·ªëng
  OWNER  // Ch·ªß kh√°ch s·∫°n
  RECEPTIONIST // L·ªÖ t√¢n
  MARKETING    // B·ªô ph·∫≠n marketing
  HOUSEKEEPING  // B·ªô ph·∫≠n ph·ª•c v·ª• ph√≤ng
  CUSTOMER     // Kh√°ch h√†ng
}

enum CustomerType {
  REGULAR  // Kh√°ch h√†ng th∆∞·ªùng
  VIP      // Kh√°ch h√†ng VIP
  VVIP     // Kh√°ch h√†ng cao c·∫•p (Platinum)
}

enum RoomStatus {
  AVAILABLE   // Ph√≤ng tr·ªëng
  BOOKED      // Ph√≤ng ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t
  OCCUPIED    // Ph√≤ng ƒëang c√≥ kh√°ch ·ªü
  CLEANING    // Ph√≤ng ƒëang ƒë∆∞·ª£c d·ªçn d·∫πp
  MAINTENANCE // Ph√≤ng ƒëang b·∫£o tr√¨ ho·∫∑c s·ª≠a ch·ªØa
}

enum BookingStatus {
  PENDING       // ƒêang ch·ªù x√°c nh·∫≠n ho·∫∑c thanh to√°n
  CONFIRMED     // ƒê√£ x√°c nh·∫≠n
  CHECKED_IN    // ƒê√£ nh·∫≠n ph√≤ng
  CHECKED_OUT   // ƒê√£ tr·∫£ ph√≤ng
  CANCELLED     // ƒê√£ h·ªßy
  NO_SHOW       // Kh√¥ng ƒë·∫øn
  EXPIRED       // H·∫øt h·∫°n thanh to√°n
  REFUNDED      // ƒê√£ ho√†n ti·ªÅn
}

enum PaymentStatus {
  PENDING         // Ch∆∞a thanh to√°n
  PARTIALLY_PAID  // ƒê√£ thanh to√°n m·ªôt ph·∫ßn
  PAID            // ƒê√£ thanh to√°n ƒë·∫ßy ƒë·ªß
  REFUNDED        // ƒê√£ ho√†n ti·ªÅn
  FAILED          // Thanh to√°n th·∫•t b·∫°i
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

enum BlogStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum PaymentType {
  PREPAID      // Thanh to√°n to√†n b·ªô tr∆∞·ªõc khi nh·∫≠n ph√≤ng
  DEPOSIT      // Thanh to√°n m·ªôt ph·∫ßn (ƒë·∫∑t c·ªçc tr∆∞·ªõc, tr·∫£ n·ªët khi checkout)
  POSTPAID     // Thanh to√°n to√†n b·ªô sau khi checkout
}